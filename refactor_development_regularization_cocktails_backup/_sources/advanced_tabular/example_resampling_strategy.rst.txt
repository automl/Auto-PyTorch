
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced_tabular/example_resampling_strategy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_tabular_example_resampling_strategy.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_tabular_example_resampling_strategy.py:


======================
Tabular Classification with different resampling strategy
======================

The following example shows how to fit a sample classification model
with different resampling strategies in AutoPyTorch
By default, AutoPyTorch uses Holdout Validation with
a 67% train size split.

.. GENERATED FROM PYTHON SOURCE LINES 11-160




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Task has already stopped
    <smac.runhistory.runhistory.RunHistory object at 0x7fe8c81c2a30> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0016143321990966797, budget=0), TrajEntry(train_perf=0.16959064327485385, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=6.3154966831207275, wallclock_time=7.869547367095947, budget=5.555555555555555)]
    {'accuracy': 0.8728323699421965}
    |    | Preprocessing                                                     | Estimator                                                       |   Weight |
    |---:|:------------------------------------------------------------------|:----------------------------------------------------------------|---------:|
    |  0 | None                                                              | CatBoostClassifier                                              |     0.36 |
    |  1 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.2  |
    |  2 | None                                                              | RFClassifier                                                    |     0.12 |
    |  3 | None                                                              | LGBMClassifier                                                  |     0.1  |
    |  4 | None                                                              | KNNClassifier                                                   |     0.1  |
    |  5 | None                                                              | ExtraTreesClassifier                                            |     0.06 |
    |  6 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.04 |
    |  7 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    Task has already stopped
    <smac.runhistory.runhistory.RunHistory object at 0x7fe8b05b6820> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0018644332885742188, budget=0), TrajEntry(train_perf=0.16242723213925875, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=13.495920419692993, wallclock_time=15.110820293426514, budget=5.555555555555555)]
    {'accuracy': 0.8670520231213873}
    |    | Preprocessing                                                     | Estimator                                                       |   Weight |
    |---:|:------------------------------------------------------------------|:----------------------------------------------------------------|---------:|
    |  0 | None                                                              | TabularClassifier                                               |     0.44 |
    |  1 | SimpleImputer,OneHotEncoder,Normalizer,KitchenSink                | no embedding,ResNetBackbone,FullyConnectedHead,nn.Sequential    |     0.24 |
    |  2 | None                                                              | TabularClassifier                                               |     0.08 |
    |  3 | None                                                              | TabularClassifier                                               |     0.08 |
    |  4 | SimpleImputer,OneHotEncoder,NoScaler,TruncSVD                     | no embedding,ShapedResNetBackbone,NoHead,nn.Sequential          |     0.06 |
    |  5 | None                                                              | TabularClassifier                                               |     0.04 |
    |  6 | None                                                              | TabularClassifier                                               |     0.02 |
    |  7 | None                                                              | TabularClassifier                                               |     0.02 |
    |  8 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    Task has already stopped
    <smac.runhistory.runhistory.RunHistory object at 0x7fe8c0bdd910> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0017209053039550781, budget=0), TrajEntry(train_perf=0.16959064327485385, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:use_weight_decay, Value: True
      optimizer:AdamOptimizer:weight_decay, Value: 0.0001
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:Lookahead:la_alpha, Value: 0.6
      trainer:StandardTrainer:Lookahead:la_steps, Value: 6
      trainer:StandardTrainer:se_lastk, Constant: 3
      trainer:StandardTrainer:use_lookahead_optimizer, Value: True
      trainer:StandardTrainer:use_snapshot_ensemble, Value: True
      trainer:StandardTrainer:use_stochastic_weight_averaging, Value: True
      trainer:StandardTrainer:weighted_loss, Constant: 1
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=1, ta_time_used=6.3253583908081055, wallclock_time=7.8550169467926025, budget=5.555555555555555)]
    {'accuracy': 0.8670520231213873}
    |    | Preprocessing                                                     | Estimator                                                       |   Weight |
    |---:|:------------------------------------------------------------------|:----------------------------------------------------------------|---------:|
    |  0 | None                                                              | CatBoostClassifier                                              |     0.7  |
    |  1 | None                                                              | RFClassifier                                                    |     0.12 |
    |  2 | None                                                              | KNNClassifier                                                   |     0.1  |
    |  3 | None                                                              | LGBMClassifier                                                  |     0.04 |
    |  4 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.04 |






|

.. code-block:: default

    import os
    import tempfile as tmp
    import warnings

    os.environ['JOBLIB_TEMP_FOLDER'] = tmp.gettempdir()
    os.environ['OMP_NUM_THREADS'] = '1'
    os.environ['OPENBLAS_NUM_THREADS'] = '1'
    os.environ['MKL_NUM_THREADS'] = '1'

    warnings.simplefilter(action='ignore', category=UserWarning)
    warnings.simplefilter(action='ignore', category=FutureWarning)

    import sklearn.datasets
    import sklearn.model_selection

    from autoPyTorch.api.tabular_classification import TabularClassificationTask
    from autoPyTorch.datasets.resampling_strategy import CrossValTypes, HoldoutValTypes


    if __name__ == '__main__':

        ############################################################################
        # Data Loading
        # ============
        X, y = sklearn.datasets.fetch_openml(data_id=40981, return_X_y=True, as_frame=True)
        X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
            X,
            y,
            random_state=1,
        )

        ############################################################################
        # Build and fit a classifier with default resampling strategy
        # ===========================================================
        api = TabularClassificationTask(
            temporary_directory='./tmp/autoPyTorch_example_tmp_03',
            output_directory='./tmp/autoPyTorch_example_out_03',
            # To maintain logs of the run, set the next two as False
            delete_tmp_folder_after_terminate=True,
            delete_output_folder_after_terminate=True,
            # 'HoldoutValTypes.holdout_validation' with 'val_share': 0.33
            # is the default argument setting for TabularClassificationTask.
            # It is explicitly specified in this example for demonstrational
            # purpose.
            resampling_strategy=HoldoutValTypes.holdout_validation,
            resampling_strategy_args={'val_share': 0.33}
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train,
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=150,
            func_eval_time_limit_secs=30
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        # Print the final ensemble built by AutoPyTorch
        print(api.show_models())

        ############################################################################

        ############################################################################
        # Build and fit a classifier with Cross validation resampling strategy
        # ====================================================================
        api = TabularClassificationTask(
            temporary_directory='./tmp/autoPyTorch_example_tmp_04',
            output_directory='./tmp/autoPyTorch_example_out_04',
            # To maintain logs of the run, set the next two as False
            delete_tmp_folder_after_terminate=True,
            delete_output_folder_after_terminate=True,
            resampling_strategy=CrossValTypes.k_fold_cross_validation,
            resampling_strategy_args={'num_splits': 3}
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train,
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=150,
            func_eval_time_limit_secs=30
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        # Print the final ensemble built by AutoPyTorch
        print(api.show_models())

        ############################################################################

        ############################################################################
        # Build and fit a classifier with Stratified resampling strategy
        # ==============================================================
        api = TabularClassificationTask(
            temporary_directory='./tmp/autoPyTorch_example_tmp_05',
            output_directory='./tmp/autoPyTorch_example_out_05',
            # To maintain logs of the run, set the next two as False
            delete_tmp_folder_after_terminate=True,
            delete_output_folder_after_terminate=True,
            # For demonstration purposes, we use
            # Stratified hold out validation. However,
            # one can also use CrossValTypes.stratified_k_fold_cross_validation.
            resampling_strategy=HoldoutValTypes.stratified_holdout_validation,
            resampling_strategy_args={'val_share': 0.33}
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train,
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=150,
            func_eval_time_limit_secs=30
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        # Print the final ensemble built by AutoPyTorch
        print(api.show_models())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  32.252 seconds)


.. _sphx_glr_download_advanced_tabular_example_resampling_strategy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/Auto-PyTorch/refactor_development?urlpath=lab/tree/notebooks/advanced_tabular/example_resampling_strategy.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_resampling_strategy.py <example_resampling_strategy.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_resampling_strategy.ipynb <example_resampling_strategy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
