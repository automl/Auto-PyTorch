
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_resampling_strategy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_resampling_strategy.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_resampling_strategy.py:


======================
Tabular Classification with different resampling strategy
======================

The following example shows how to fit a sample classification model
with different resampling strategies in AutoPyTorch
By default, AutoPyTorch uses Holdout Validation with
a 67% train size split.

.. GENERATED FROM PYTHON SOURCE LINES 11-30

.. code-block:: default

    import os
    import tempfile as tmp
    import warnings

    os.environ['JOBLIB_TEMP_FOLDER'] = tmp.gettempdir()
    os.environ['OMP_NUM_THREADS'] = '1'
    os.environ['OPENBLAS_NUM_THREADS'] = '1'
    os.environ['MKL_NUM_THREADS'] = '1'

    warnings.simplefilter(action='ignore', category=UserWarning)
    warnings.simplefilter(action='ignore', category=FutureWarning)

    import sklearn.datasets
    import sklearn.model_selection

    from autoPyTorch.api.tabular_classification import TabularClassificationTask
    from autoPyTorch.datasets.resampling_strategy import CrossValTypes, HoldoutValTypes









.. GENERATED FROM PYTHON SOURCE LINES 31-33

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: default

    X, y = sklearn.datasets.fetch_openml(data_id=40981, return_X_y=True, as_frame=True)
    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X,
        y,
        random_state=1,
    )








.. GENERATED FROM PYTHON SOURCE LINES 41-43

Build and fit a classifier with default resampling strategy
===========================================================

.. GENERATED FROM PYTHON SOURCE LINES 43-52

.. code-block:: default

    api = TabularClassificationTask(
        # 'HoldoutValTypes.holdout_validation' with 'val_share': 0.33
        # is the default argument setting for TabularClassificationTask.
        # It is explicitly specified in this example for demonstrational
        # purpose.
        resampling_strategy=HoldoutValTypes.holdout_validation,
        resampling_strategy_args={'val_share': 0.33}
    )








.. GENERATED FROM PYTHON SOURCE LINES 53-55

Search for an ensemble of machine learning algorithms
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 55-65

.. code-block:: default

    api.search(
        X_train=X_train,
        y_train=y_train,
        X_test=X_test.copy(),
        y_test=y_test.copy(),
        optimize_metric='accuracy',
        total_walltime_limit=150,
        func_eval_time_limit_secs=30
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <autoPyTorch.api.tabular_classification.TabularClassificationTask object at 0x7f2f5d348d90>



.. GENERATED FROM PYTHON SOURCE LINES 66-68

Print the final ensemble performance
====================================

.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. code-block:: default

    y_pred = api.predict(X_test)
    score = api.score(y_pred, y_test)
    print(score)
    # Print the final ensemble built by AutoPyTorch
    print(api.show_models())

    # Print statistics from search
    print(api.sprint_statistics())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'accuracy': 0.8670520231213873}
    |    | Preprocessing                                                 | Estimator                                                       |   Weight |
    |---:|:--------------------------------------------------------------|:----------------------------------------------------------------|---------:|
    |  0 | None                                                          | CBLearner                                                       |     0.36 |
    |  1 | SimpleImputer,OneHotEncoder,StandardScaler,PolynomialFeatures | embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential |     0.22 |
    |  2 | None                                                          | ETLearner                                                       |     0.2  |
    |  3 | SimpleImputer,OneHotEncoder,Normalizer,KitchenSink            | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential          |     0.14 |
    |  4 | SimpleImputer,OneHotEncoder,Normalizer,KitchenSink            | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential          |     0.06 |
    |  5 | None                                                          | RFLearner                                                       |     0.02 |
    autoPyTorch results:
            Dataset name: 42a87b39-4bc3-11ec-8727-df8c3c818998
            Optimisation Metric: accuracy
            Best validation score: 0.8654970760233918
            Number of target algorithm runs: 19
            Number of successful target algorithm runs: 17
            Number of crashed target algorithm runs: 2
            Number of target algorithms that exceeded the time limit: 0
            Number of target algorithms that exceeded the memory limit: 0





.. GENERATED FROM PYTHON SOURCE LINES 80-82

Build and fit a classifier with Cross validation resampling strategy
====================================================================

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default

    api = TabularClassificationTask(
        resampling_strategy=CrossValTypes.k_fold_cross_validation,
        resampling_strategy_args={'num_splits': 3}
    )








.. GENERATED FROM PYTHON SOURCE LINES 88-90

Search for an ensemble of machine learning algorithms
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 90-100

.. code-block:: default

    api.search(
        X_train=X_train,
        y_train=y_train,
        X_test=X_test.copy(),
        y_test=y_test.copy(),
        optimize_metric='accuracy',
        total_walltime_limit=150,
        func_eval_time_limit_secs=30
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <autoPyTorch.api.tabular_classification.TabularClassificationTask object at 0x7f2f6c31e4c0>



.. GENERATED FROM PYTHON SOURCE LINES 101-103

Print the final ensemble performance
====================================

.. GENERATED FROM PYTHON SOURCE LINES 103-112

.. code-block:: default

    y_pred = api.predict(X_test)
    score = api.score(y_pred, y_test)
    print(score)
    # Print the final ensemble built by AutoPyTorch
    print(api.show_models())

    # Print statistics from search
    print(api.sprint_statistics())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'accuracy': 0.884393063583815}
    |    | Preprocessing   | Estimator               |   Weight |
    |---:|:----------------|:------------------------|---------:|
    |  0 | None            | TabularTraditionalModel |     0.98 |
    |  1 | None            | TabularTraditionalModel |     0.02 |
    autoPyTorch results:
            Dataset name: aad5970e-4bc3-11ec-8727-df8c3c818998
            Optimisation Metric: accuracy
            Best validation score: 0.8742452475491833
            Number of target algorithm runs: 14
            Number of successful target algorithm runs: 11
            Number of crashed target algorithm runs: 2
            Number of target algorithms that exceeded the time limit: 1
            Number of target algorithms that exceeded the memory limit: 0





.. GENERATED FROM PYTHON SOURCE LINES 115-117

Build and fit a classifier with Stratified resampling strategy
==============================================================

.. GENERATED FROM PYTHON SOURCE LINES 117-125

.. code-block:: default

    api = TabularClassificationTask(
        # For demonstration purposes, we use
        # Stratified hold out validation. However,
        # one can also use CrossValTypes.stratified_k_fold_cross_validation.
        resampling_strategy=HoldoutValTypes.stratified_holdout_validation,
        resampling_strategy_args={'val_share': 0.33}
    )








.. GENERATED FROM PYTHON SOURCE LINES 126-128

Search for an ensemble of machine learning algorithms
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 128-138

.. code-block:: default

    api.search(
        X_train=X_train,
        y_train=y_train,
        X_test=X_test.copy(),
        y_test=y_test.copy(),
        optimize_metric='accuracy',
        total_walltime_limit=150,
        func_eval_time_limit_secs=30
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <autoPyTorch.api.tabular_classification.TabularClassificationTask object at 0x7f2f6c31e2e0>



.. GENERATED FROM PYTHON SOURCE LINES 139-141

Print the final ensemble performance
====================================

.. GENERATED FROM PYTHON SOURCE LINES 141-149

.. code-block:: default

    y_pred = api.predict(X_test)
    score = api.score(y_pred, y_test)
    print(score)
    # Print the final ensemble built by AutoPyTorch
    print(api.show_models())

    # Print statistics from search
    print(api.sprint_statistics())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'accuracy': 0.861271676300578}
    |    | Preprocessing                                                     | Estimator                                                       |   Weight |
    |---:|:------------------------------------------------------------------|:----------------------------------------------------------------|---------:|
    |  0 | None                                                              | LGBMLearner                                                     |     0.34 |
    |  1 | SimpleImputer,OneHotEncoder,Normalizer,KitchenSink                | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential          |     0.22 |
    |  2 | None                                                              | CBLearner                                                       |     0.14 |
    |  3 | SimpleImputer,OneHotEncoder,StandardScaler,PolynomialFeatures     | embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential |     0.12 |
    |  4 | None                                                              | ETLearner                                                       |     0.08 |
    |  5 | None                                                              | SVMLearner                                                      |     0.06 |
    |  6 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    |  7 | SimpleImputer,OneHotEncoder,StandardScaler,NoFeaturePreprocessing | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    autoPyTorch results:
            Dataset name: 1e21343e-4bc4-11ec-8727-df8c3c818998
            Optimisation Metric: accuracy
            Best validation score: 0.847953216374269
            Number of target algorithm runs: 18
            Number of successful target algorithm runs: 15
            Number of crashed target algorithm runs: 2
            Number of target algorithms that exceeded the time limit: 1
            Number of target algorithms that exceeded the memory limit: 0






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 9 minutes  1.230 seconds)


.. _sphx_glr_download_examples_40_advanced_example_resampling_strategy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/Auto-PyTorch/development?urlpath=lab/tree/notebooks/examples/40_advanced/example_resampling_strategy.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_resampling_strategy.py <example_resampling_strategy.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_resampling_strategy.ipynb <example_resampling_strategy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
