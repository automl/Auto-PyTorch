
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_parallel_n_jobs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_parallel_n_jobs.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_parallel_n_jobs.py:


======================
Tabular Classification
======================

The following example shows how to fit a sample classification model parallely on 2 cores
with AutoPyTorch

.. GENERATED FROM PYTHON SOURCE LINES 9-69




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <smac.runhistory.runhistory.RunHistory object at 0x7f17d0e02550> [TrajEntry(train_perf=2147483648, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=0, ta_time_used=0.0, wallclock_time=0.0011980533599853516, budget=0), TrajEntry(train_perf=0.4444444444444444, incumbent_id=1, incumbent=Configuration:
      data_loader:batch_size, Value: 142
      encoder:__choice__, Value: 'NoEncoder'
      feature_preprocessor:PowerTransformer:standardize, Value: True
      feature_preprocessor:__choice__, Value: 'PowerTransformer'
      imputer:categorical_strategy, Value: 'constant_!missing!'
      imputer:numerical_strategy, Value: 'median'
      lr_scheduler:__choice__, Value: 'NoScheduler'
      network_backbone:ShapedResNetBackbone:activation, Value: 'relu'
      network_backbone:ShapedResNetBackbone:blocks_per_group, Value: 1
      network_backbone:ShapedResNetBackbone:max_shake_drop_probability, Value: 0.7993610769045779
      network_backbone:ShapedResNetBackbone:max_units, Value: 175
      network_backbone:ShapedResNetBackbone:num_groups, Value: 3
      network_backbone:ShapedResNetBackbone:output_dim, Value: 550
      network_backbone:ShapedResNetBackbone:resnet_shape, Value: 'funnel'
      network_backbone:ShapedResNetBackbone:use_dropout, Value: False
      network_backbone:ShapedResNetBackbone:use_shake_drop, Value: True
      network_backbone:ShapedResNetBackbone:use_shake_shake, Value: True
      network_backbone:__choice__, Value: 'ShapedResNetBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'sigmoid'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 308
      network_init:KaimingInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'KaimingInit'
      optimizer:AdamOptimizer:beta1, Value: 0.8660298289969375
      optimizer:AdamOptimizer:beta2, Value: 0.9517157453274235
      optimizer:AdamOptimizer:lr, Value: 1.0377748473731365e-05
      optimizer:AdamOptimizer:weight_decay, Value: 0.07437634123996516
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:Normalizer:norm, Value: 'mean_abs'
      scaler:__choice__, Value: 'Normalizer'
      trainer:MixUpTrainer:alpha, Value: 0.13179357367568267
      trainer:MixUpTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'MixUpTrainer'
    , ta_runs=1, ta_time_used=3.230516195297241, wallclock_time=4.364314794540405, budget=5.555555555555555), TrajEntry(train_perf=0.1578947368421053, incumbent_id=2, incumbent=Configuration:
      data_loader:batch_size, Value: 64
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:__choice__, Value: 'NoFeaturePreprocessor'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:ReduceLROnPlateau:factor, Value: 0.1
      lr_scheduler:ReduceLROnPlateau:mode, Value: 'min'
      lr_scheduler:ReduceLROnPlateau:patience, Value: 10
      lr_scheduler:__choice__, Value: 'ReduceLROnPlateau'
      network_backbone:ShapedMLPBackbone:activation, Value: 'relu'
      network_backbone:ShapedMLPBackbone:max_units, Value: 200
      network_backbone:ShapedMLPBackbone:mlp_shape, Value: 'funnel'
      network_backbone:ShapedMLPBackbone:num_groups, Value: 5
      network_backbone:ShapedMLPBackbone:output_dim, Value: 200
      network_backbone:ShapedMLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'ShapedMLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 128
      network_init:XavierInit:bias_strategy, Value: 'Normal'
      network_init:__choice__, Value: 'XavierInit'
      optimizer:AdamOptimizer:beta1, Value: 0.9
      optimizer:AdamOptimizer:beta2, Value: 0.9
      optimizer:AdamOptimizer:lr, Value: 0.01
      optimizer:AdamOptimizer:weight_decay, Value: 0.0
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:StandardTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=2, ta_time_used=6.787341594696045, wallclock_time=4.685800790786743, budget=5.555555555555555), TrajEntry(train_perf=0.14035087719298245, incumbent_id=3, incumbent=Configuration:
      data_loader:batch_size, Value: 32
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:PowerTransformer:standardize, Value: False
      feature_preprocessor:__choice__, Value: 'PowerTransformer'
      imputer:categorical_strategy, Value: 'most_frequent'
      imputer:numerical_strategy, Value: 'median'
      lr_scheduler:CosineAnnealingLR:T_max, Value: 103
      lr_scheduler:__choice__, Value: 'CosineAnnealingLR'
      network_backbone:MLPBackbone:activation, Value: 'sigmoid'
      network_backbone:MLPBackbone:num_groups, Value: 2
      network_backbone:MLPBackbone:num_units_1, Value: 464
      network_backbone:MLPBackbone:num_units_2, Value: 434
      network_backbone:MLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'MLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'sigmoid'
      network_head:fully_connected:num_layers, Value: 3
      network_head:fully_connected:units_layer_1, Value: 434
      network_head:fully_connected:units_layer_2, Value: 118
      network_init:KaimingInit:bias_strategy, Value: 'Zero'
      network_init:__choice__, Value: 'KaimingInit'
      optimizer:AdamWOptimizer:beta1, Value: 0.9175282300716818
      optimizer:AdamWOptimizer:beta2, Value: 0.9148484215934113
      optimizer:AdamWOptimizer:lr, Value: 0.0010242582346087676
      optimizer:AdamWOptimizer:weight_decay, Value: 0.07425046847093834
      optimizer:__choice__, Value: 'AdamWOptimizer'
      scaler:__choice__, Value: 'StandardScaler'
      trainer:MixUpTrainer:alpha, Value: 0.9660122415558304
      trainer:MixUpTrainer:weighted_loss, Value: True
      trainer:__choice__, Value: 'MixUpTrainer'
    , ta_runs=6, ta_time_used=20.616616249084473, wallclock_time=21.592490196228027, budget=5.555555555555555), TrajEntry(train_perf=0.1286549707602339, incumbent_id=4, incumbent=Configuration:
      data_loader:batch_size, Value: 268
      encoder:__choice__, Value: 'OneHotEncoder'
      feature_preprocessor:TruncatedSVD:target_dim, Value: 5
      feature_preprocessor:__choice__, Value: 'TruncatedSVD'
      imputer:categorical_strategy, Value: 'constant_!missing!'
      imputer:numerical_strategy, Value: 'mean'
      lr_scheduler:CosineAnnealingLR:T_max, Value: 290
      lr_scheduler:__choice__, Value: 'CosineAnnealingLR'
      network_backbone:MLPBackbone:activation, Value: 'tanh'
      network_backbone:MLPBackbone:num_groups, Value: 9
      network_backbone:MLPBackbone:num_units_1, Value: 854
      network_backbone:MLPBackbone:num_units_2, Value: 409
      network_backbone:MLPBackbone:num_units_3, Value: 904
      network_backbone:MLPBackbone:num_units_4, Value: 89
      network_backbone:MLPBackbone:num_units_5, Value: 875
      network_backbone:MLPBackbone:num_units_6, Value: 352
      network_backbone:MLPBackbone:num_units_7, Value: 687
      network_backbone:MLPBackbone:num_units_8, Value: 863
      network_backbone:MLPBackbone:num_units_9, Value: 422
      network_backbone:MLPBackbone:use_dropout, Value: False
      network_backbone:__choice__, Value: 'MLPBackbone'
      network_embedding:__choice__, Value: 'NoEmbedding'
      network_head:__choice__, Value: 'fully_connected'
      network_head:fully_connected:activation, Value: 'relu'
      network_head:fully_connected:num_layers, Value: 2
      network_head:fully_connected:units_layer_1, Value: 229
      network_init:KaimingInit:bias_strategy, Value: 'Zero'
      network_init:__choice__, Value: 'KaimingInit'
      optimizer:AdamOptimizer:beta1, Value: 0.8670243442016202
      optimizer:AdamOptimizer:beta2, Value: 0.9877701057476191
      optimizer:AdamOptimizer:lr, Value: 0.0005235907018237285
      optimizer:AdamOptimizer:weight_decay, Value: 0.061106742612507106
      optimizer:__choice__, Value: 'AdamOptimizer'
      scaler:Normalizer:norm, Value: 'mean_abs'
      scaler:__choice__, Value: 'Normalizer'
      trainer:StandardTrainer:weighted_loss, Value: False
      trainer:__choice__, Value: 'StandardTrainer'
    , ta_runs=25, ta_time_used=139.06318712234497, wallclock_time=109.31614375114441, budget=50.0)]
    {'accuracy': 0.8265895953757225}
    |    | Preprocessing                                                 | Estimator                                                          |   Weight |
    |---:|:--------------------------------------------------------------|:-------------------------------------------------------------------|---------:|
    |  0 | SimpleImputer,NoEncoder,MinMaxScaler,NoFeaturePreprocessing   | no embedding,MLPBackbone,FullyConnectedHead,nn.Sequential          |     0.38 |
    |  1 | SimpleImputer,NoEncoder,MinMaxScaler,TruncSVD                 | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential    |     0.14 |
    |  2 | SimpleImputer,OneHotEncoder,NoScaler,TruncSVD                 | embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential    |     0.08 |
    |  3 | SimpleImputer,OneHotEncoder,NoScaler,Nystroem                 | embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential       |     0.06 |
    |  4 | SimpleImputer,OneHotEncoder,NoScaler,Nystroem                 | embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential       |     0.06 |
    |  5 | SimpleImputer,NoEncoder,NoScaler,Nystroem                     | no embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential |     0.06 |
    |  6 | SimpleImputer,OneHotEncoder,StandardScaler,PolynomialFeatures | embedding,MLPBackbone,FullyConnectedHead,nn.Sequential             |     0.04 |
    |  7 | None                                                          | CBLearner                                                          |     0.04 |
    |  8 | None                                                          | KNNLearner                                                         |     0.04 |
    |  9 | SimpleImputer,OneHotEncoder,Normalizer,KitchenSink            | no embedding,ShapedResNetBackbone,FullyConnectedHead,nn.Sequential |     0.02 |
    | 10 | SimpleImputer,NoEncoder,StandardScaler,PolynomialFeatures     | no embedding,MLPBackbone,FullyConnectedHead,nn.Sequential          |     0.02 |
    | 11 | SimpleImputer,NoEncoder,Normalizer,TruncSVD                   | no embedding,ShapedMLPBackbone,FullyConnectedHead,nn.Sequential    |     0.02 |
    | 12 | None                                                          | ETLearner                                                          |     0.02 |
    | 13 | None                                                          | SVMLearner                                                         |     0.02 |






|

.. code-block:: default

    import os
    import tempfile as tmp
    import warnings

    os.environ['JOBLIB_TEMP_FOLDER'] = tmp.gettempdir()
    os.environ['OMP_NUM_THREADS'] = '1'
    os.environ['OPENBLAS_NUM_THREADS'] = '1'
    os.environ['MKL_NUM_THREADS'] = '1'

    warnings.simplefilter(action='ignore', category=UserWarning)
    warnings.simplefilter(action='ignore', category=FutureWarning)

    import sklearn.datasets
    import sklearn.model_selection

    from autoPyTorch.api.tabular_classification import TabularClassificationTask

    if __name__ == '__main__':
        ############################################################################
        # Data Loading
        # ============
        X, y = sklearn.datasets.fetch_openml(data_id=40981, return_X_y=True, as_frame=True)
        X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
            X,
            y,
            random_state=1,
        )

        ############################################################################
        # Build and fit a classifier
        # ==========================
        api = TabularClassificationTask(
            n_jobs=2,
            seed=42,
        )

        ############################################################################
        # Search for an ensemble of machine learning algorithms
        # =====================================================
        api.search(
            X_train=X_train,
            y_train=y_train,
            X_test=X_test.copy(),
            y_test=y_test.copy(),
            optimize_metric='accuracy',
            total_walltime_limit=300,
            func_eval_time_limit_secs=50,
            # Each one of the 2 jobs is allocated 3GB
            memory_limit=3072,
        )

        ############################################################################
        # Print the final ensemble performance
        # ====================================
        print(api.run_history, api.trajectory)
        y_pred = api.predict(X_test)
        score = api.score(y_pred, y_test)
        print(score)
        # Print the final ensemble built by AutoPyTorch
        print(api.show_models())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  30.198 seconds)


.. _sphx_glr_download_examples_40_advanced_example_parallel_n_jobs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/Auto-PyTorch/development?urlpath=lab/tree/notebooks/examples/40_advanced/example_parallel_n_jobs.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_parallel_n_jobs.py <example_parallel_n_jobs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_parallel_n_jobs.ipynb <example_parallel_n_jobs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
